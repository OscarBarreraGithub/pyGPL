#include <array>
#include <cmath>
#include <complex>

#include "FastGPL.h"

#include "FastGPL_internal.h"

using std::array;
using std::complex;
using std::string;

using FastGPL::FastGPL_error;
using FastGPL::Log;

using FastGPL_internal::Zeta;

complex<double> FastGPL::Log(complex<double> x)
{
    int s { 1 };
    if (x.imag() < 0)
        s = -1;
    return Log(x, s);
}

complex<double> FastGPL::Log(complex<double> x, int s)
{
    if (x == 0.0) {
        throw FastGPL_error { "Log: divergent" };
    }

    if (x.imag() == 0) {
        double l { log(std::abs(x.real())) };
        if (x.real() > 0)
            return l;
        else
            return s > 0 ? complex<double> { l, M_PI } : complex<double> { l, -M_PI };
    } else
        return log(x);
}

complex<double> FastGPL::PolyLog(int n, complex<double> x)
{
    int s { -1 };
    if (x.imag() > 0)
        s = 1;
    return PolyLog(n, x, s);
}

complex<double> FastGPL::PolyLog(int n, complex<double> x, int s)
{
    if (n < 2 || n > 8)
        throw FastGPL_error { "PolyLog: not implemented" };

    if (x == 0.0)
        return 0;

    if (x == 1.0)
        return Zeta(n);

    if (x.real() <= 0.5 && abs(x) <= 1.0) {
        return FastGPL_internal::PolyLog_series2(n, x);
    } else if (x.real() > 0.5 && abs(x - 1.0) <= 1.0) {
        return FastGPL_internal::PolyLog_series3(n, x, s);
    } else {
        return FastGPL_internal::PolyLog_inversion(n, x, s);
    }
}

// Series expansion of PolyLog[n, 1-Exp[-alpha]] for 2<=n<=8
// Applicable when Re[x]<=1/2 && Abs[x]<=1
complex<double> FastGPL_internal::PolyLog_series2(int n, complex<double> x)
{
    constexpr array<array<double, 40>, 7> C { { { 1., -0.25, 0.0277777777777777778, 0,
                                                    -0.000277777777777777778, 0,
                                                    4.72411186696900983e-6, 0,
                                                    -9.18577307466196355e-8, 0,
                                                    1.89788699889709991e-9, 0,
                                                    -4.06476164514422553e-11, 0,
                                                    8.92169102045645256e-13, 0,
                                                    -1.99392958607210757e-14, 0,
                                                    4.51898002961991819e-16, 0,
                                                    -1.0356517612181247e-17, 0,
                                                    2.39521862102618675e-19, 0,
                                                    -5.58178587432500934e-21, 0,
                                                    1.30915075541832129e-22, 0,
                                                    -3.08741980242674029e-24, 0,
                                                    7.31597565270220342e-26, 0,
                                                    -1.74084565723400074e-27, 0,
                                                    4.15763564461389972e-29, 0,
                                                    -9.9621484882846221e-31, 0,
                                                    2.3940344248961653e-32, 0 },
        { 1., -0.375, 0.0787037037037037037, -0.00868055555555555556,
            0.00012962962962962963, 0.0000810185185185185185, -3.41935716085375949e-6,
            -1.32865646258503401e-6, 8.66087175610985135e-8, 2.52608759553203998e-8,
            -2.14469446836406476e-9, -5.14011062201297892e-10, 5.24958211460082944e-11,
            1.08877544066363184e-11, -1.27793960944936953e-12, -2.36982417730874521e-13,
            3.10435788796546229e-14, 5.26175862991250608e-15, -7.53847954994926537e-16,
            -1.18623225777522853e-16, 1.83169799654913834e-17, 2.70681710318373502e-18,
            -4.45543389782963883e-19, -6.23754849225569465e-20, 1.08515215348745349e-20,
            1.44911748660360819e-21, -2.64663397544589903e-22, -3.38976534885101047e-23,
            6.46404773360331089e-24, 7.97583448960241242e-25, -1.58091787902874834e-25,
            -1.88614997296228682e-26, 3.87155366384184733e-27, 4.48011750023456073e-28,
            -9.49303387191183613e-29, -1.06828138090773812e-29, 2.33044789361030519e-30,
            2.55607757265197541e-31, -5.72742160613725968e-32, -6.13471321379642358e-33 },
        { 1., -0.4375, 0.116512345679012346, -0.0198206018518518519,
            0.0019279320987654321, -0.0000310570987654320988, -0.0000156240091148578353,
            8.48512354677320664e-7, 2.29096166031897114e-7, -2.18326142185269169e-8,
            -3.88282487917201557e-9, 5.44629210322033212e-10, 6.96080521068272541e-11,
            -1.33757376864452152e-11, -1.27848526852665716e-12, 3.26056285802489224e-13,
            2.36475711686182574e-14, -7.9231351220311617e-15, -4.34529157099841873e-16,
            1.92362700625359201e-16, 7.81241433319595467e-18, -4.67180384480365552e-18,
            -1.34353443298128479e-19, 1.13568268513473432e-19, 2.11527562024325868e-21,
            -2.76420263347465174e-21, -2.70681766082400643e-23, 6.73720448286285721e-23,
            1.3287265456683823e-25, -1.64437730563678265e-24, 8.28360589993393411e-27,
            4.01908484950693507e-26, -4.57571384448487904e-28, -9.83641090946151278e-28,
            1.69003395560378511e-29, 2.41048055630598085e-29, -5.42661270567141825e-31,
            -5.91424295887417679e-31, 1.62321109010873708e-32, 1.45275954377402759e-32 },
        { 1., -0.46875, 0.139531893004115226, -0.0286337770061728395,
            0.00403174125514403292, -0.000339850180041152263, 4.54451846216176665e-6,
            2.39168080485690119e-6, -1.27626926001227466e-7, -3.16289843065059324e-8,
            3.28481184453351916e-9, 4.7613713995660579e-10, -8.08468981719098303e-11,
            -7.23876485877372069e-12, 1.94397601151739685e-12, 1.0256978405977236e-13,
            -4.61805510098848302e-14, -1.153585719647058e-15, 1.0903545401333394e-15,
            2.31481363172925264e-18, -2.56699170432652922e-17, 4.5708620607314969e-19,
            6.03667796132057059e-19, -2.1677624944062413e-20, -1.41940966156001653e-20,
            7.50200095064138626e-22, 3.33870453950783972e-22, -2.30600404426203477e-23,
            -7.85817324568948189e-24, 6.66834530437388085e-25, 1.85091565409252972e-25,
            -1.85915294451740856e-26, -4.36297464803458904e-27, 5.06110760995292845e-28,
            1.02919182497568782e-28, -1.35513912210183166e-29, -2.42940596129573827e-30,
            3.58519739665037052e-31, 5.73796581610397206e-32, -9.40035936245687345e-33 },
        { 1., -0.484375, 0.15241340877914952, -0.0343655558770576132,
            0.00571747972393689986, -0.000681804537465706447, 0.0000499603619487344931,
            -4.91660511960390477e-7, -3.06329751613021638e-7, 1.44145992708490954e-8,
            3.72724382309241066e-9, -3.73008673454876072e-10, -5.12465268160858324e-11,
            9.05419309566366829e-12, 6.73818826155125171e-13, -2.12158311503031353e-13,
            -6.84088117190116977e-15, 4.86911784620055813e-15, -4.84398784998725042e-18,
            -1.10271048491074909e-16, 3.33537969169393817e-18, 2.4735307488641353e-18,
            -1.4370616434232492e-19, -5.50471103350981181e-20, 4.7467713917327225e-21,
            1.21583871780681052e-21, -1.410755240356185e-22, -2.66388312532683466e-23,
            3.9667657428631008e-24, 5.78216973585436153e-25, -1.07877780631642573e-25,
            -1.24073970867569099e-26, 2.87041179178936017e-27, 2.62355535630293306e-28,
            -7.52294854657541273e-29, -5.44017883796246962e-30, 1.95025795325101664e-30,
            1.0978494282205188e-31, -5.01495835741630092e-32, -2.12867375043927611e-33 },
        { 1., -0.4921875, 0.159311414037494284, -0.0377342108999914266,
            0.00684249723436785551, -0.000955266277827789209, 0.0000983861096343911582,
            -6.32207991949284159e-6, 4.17029237826057392e-8, 3.37573694864458909e-8,
            -1.31392925656954631e-9, -3.83374988273315363e-10, 3.46287759336926974e-11,
            4.96337631909790551e-12, -8.35125493252271634e-13, -5.93728769342140147e-14,
            1.91508890675624492e-14, 4.4923296555739348e-16, -4.2523095004880923e-16,
            6.33847406665985132e-18, 9.21896261840023824e-18, -4.65484059709870184e-19,
            -1.95704056061666383e-19, 1.7075209368525535e-20, 4.0643063711096424e-21,
            -5.23444805589719628e-22, -8.22104271255867802e-23, 1.47869947065508249e-23,
            1.60497616358846243e-24, -3.98998166405291891e-25, -2.97150712848834325e-26,
            1.04595118731787933e-26, 5.02606060685330889e-28, -2.68854745709541675e-28,
            -7.01878286547805839e-30, 6.81378380132658252e-30, 4.73059641826613061e-32,
            -1.70863388178203757e-31, 1.7837181906191159e-33, 4.24927482537803535e-33 },
        { 1., -0.49609375, 0.162912832456942539, -0.0396013857296846422,
            0.00751933299305317406, -0.00113957312000183375, 0.000136861468807314803,
            -0.0000123735091632103453, 7.04403554051395628e-7, -2.80987593475236667e-9,
            -3.26552690392724092e-9, 9.9850753120326592e-11, 3.48515845727506847e-11,
            -2.72835978396680643e-12, -4.3442202485823813e-13, 6.60667225792349303e-14,
            4.97184697432947923e-15, -1.49446902412717869e-15, -3.29776346212443424e-17,
            3.23116629016520322e-17, -6.69428381930306155e-19, -6.73807298472105365e-19,
            4.15717147424948294e-20, 1.35614730089099442e-20, -1.4493971267845757e-21,
            -2.61655316139746487e-22, 4.28034451641893283e-23, 4.75592678777398692e-24,
            -1.16829491167070889e-24, -7.81868341015493916e-26, 3.04584467222493341e-26,
            1.03266975812831524e-27, -7.70467712229892671e-28, -5.01728239094723998e-30,
            1.90706899332567638e-29, -3.42745865223297604e-31, -4.64155852763223787e-31,
            1.90940113309928713e-32, 1.11402892752356716e-32,
            -7.13818987058338123e-34 } } };

    complex<double> alpha { -log(1. - x) };

    size_t j { 0 };
    complex<double> power { alpha };
    complex<double> term { power * C[n - 2][0] };
    complex<double> res { term };
    while (abs(term) > abs(res) * 1e-16) {
        ++j;
        power *= alpha;
        if (j == C[0].size())
            throw FastGPL_error { "PolyLog_series2 converges too slowly" };
        if (C[n - 2][j] == 0)
            continue;
        term = power * C[n - 2][j];
        res += term;
    }
    return res;
}

// Series expansion of PolyLog[n, Exp[-alpha]] for 2<=n<=8
// Applicable when Re[x]>1/2 && Abs[x-1]<=1
complex<double> FastGPL_internal::PolyLog_series3(int n, complex<double> x, int s)
{
    complex<double> alpha { -log(x) };

    complex<double> power { positive_int_power(-alpha, n - 1) / factorial(n - 1) };

    complex<double> res { (HarmonicNumber(n - 1) - Log(alpha, -s)) * power };

    complex<double> power1 { power }; // records (-alpha)^m/m!
    for (int m = n - 2; m >= 0; --m) {
        power1 *= m + 1;
        power1 /= -alpha;
        res += power1 * Zeta(n - m);
    }

    power *= -alpha;
    power /= n; // now power = (-alpha)^n/n!
    res += power * Zeta(0);

    // Bernoulli numbers B_n for 0<=n<=40
    constexpr array<double, 41> B { 1., -0.5, 0.16666666666666666667, 0,
        -0.033333333333333333333, 0, 0.023809523809523809524, 0, -0.033333333333333333333,
        0, 0.075757575757575757576, 0, -0.25311355311355311355, 0, 1.1666666666666666667,
        0, -7.0921568627450980392, 0, 54.971177944862155388, 0, -529.12424242424242424, 0,
        6192.1231884057971014, 0, -86580.253113553113553, 0, 1.4255171666666666667e6, 0,
        -2.7298231067816091954e7, 0, 6.0158087390064236838e8, 0,
        -1.5116315767092156863e10, 0, 4.2961464306116666667e11, 0,
        -1.3711655205088332772e13, 0, 4.8833231897359316667e14, 0,
        -1.9296579341940068149e16 };

    size_t i { 2 };
    power *= -alpha;
    power /= n + 1; // now power = (-alpha)^(n+1)/(n+1)!
    complex<double> term { -power * (B[i] / i) };
    res += term;
    while (abs(term) > abs(res) * 1e-16) {
        i += 2;
        if (i >= B.size())
            throw FastGPL_error { "PolyLog_series3 converges too slowly" };
        if (B[i] == 0)
            throw FastGPL_error { "PolyLog_series3 shouldn't hit B[odd]" };
        power *= alpha * alpha;
        power /= (i + n - 2) * (i + n - 1);
        term = -power * (B[i] / i);
        res += term;
    }
    return res;
}

// Relate PolyLog(n, x) to PolyLog(n, 1/x)
// Should be used when |x| > 1 && |x-1| > 1
complex<double> FastGPL_internal::PolyLog_inversion(int n, complex<double> x, int s)
{
    complex<double> Li_n_inv { PolyLog_series2(n, 1. / x) };
    complex<double> l { Log(-x, -s) };
    complex<double> res { (n % 2 == 0 ? -1.0 : 1.0) * Li_n_inv
        - positive_int_power(l, n) / factorial(n) };
    for (int r = 1; r <= n / 2; ++r) {
        res += 2 * (1.0 / positive_int_power(2.0, 2 * r - 1) - 1) * Zeta(2 * r)
            * positive_int_power(l, n - 2 * r) / factorial(n - 2 * r);
    }
    return res;
}
